/*
author: hezhigang
date: 5/15/21
time: 10:26 PM
*/
package com.leetcode;

import java.util.Arrays;
import java.util.Deque;
import java.util.LinkedList;

/**
 * 946. Validate Stack Sequences
 * https://leetcode.com/problems/validate-stack-sequences/
 */
public class ValidateStackSequences {

    /**
     * Greedy approach
     * https://afteracademy.com/blog/validate-stack-sequences
     * 152 / 152 test cases passed.
     * Runtime: 1 ms, faster than 93.97% of Java online submissions for Validate Stack Sequences.
     * Memory Usage: 38.4 MB, less than 90.26% of Java online submissions for Validate Stack Sequences.
     * @param pushed
     * @param popped
     * @return
     */
    public static boolean validateStackSequences_greedy_stack(int[] pushed, int[] popped) {
        Deque<Integer> stack = new LinkedList<Integer>();
        int j = 0;
        for (int i = 0; i < pushed.length; i++) {
            stack.addFirst(pushed[i]);
            while (!stack.isEmpty() && stack.peekFirst() == popped[j]) {
                stack.removeFirst();
                j++;
            }
        }
        if (stack.isEmpty())
            return true;
        else
            return false;
    }

    /**
     * https://leetcode.com/problems/validate-stack-sequences/discuss/1084554/Java-no-stack-solution
     * Runtime: 0 ms, faster than 100.00% of Java online submissions for Validate Stack Sequences.
     * Memory Usage: 38.9 MB, less than 18.73% of Java online submissions for Validate Stack Sequences.
     * @param pushed
     * @param popped
     * @return
     */
    public static boolean validateStackSequences(int[] pushed, int[] popped) {
        int i = 0;
        for (int k = 0, j = 0; k < pushed.length; k++) {
            pushed[i] = pushed[k];
            while (i >= 0 && pushed[i] == popped[j]) {
                i--;
                j++;
            }
            i++;
        }
        return i == 0;
    }

    public static void main(String[] args) {
//        int[] pushed = {1, 2, 3, 4, 5}, popped = {4, 5, 3, 2, 1};
        int[] pushed = {1, 2, 3, 4, 5}, popped = {4, 3, 5, 1, 2};
        boolean b = validateStackSequences(pushed, popped);
        System.out.printf("permutation %s %s be generated by stack %s", Arrays.toString(popped), b ? "can" : " can't", Arrays.toString(pushed));
    }
}
