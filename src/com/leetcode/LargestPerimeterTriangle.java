/*
author: hezhigang
date: 12/13/20
time: 11:14 PM
*/
package com.leetcode;

import java.util.Arrays;

/**
 * 976. Largest Perimeter Triangle
 * https://leetcode.com/problems/largest-perimeter-triangle/
 */
public class LargestPerimeterTriangle {

    public static boolean isValidTriangle(int a, int b, int c) {
        boolean r = false;
        if (a + b > c && a + c > b && b + c > a)
            r = true;
        return r;
    }

    /**
     * Time Limit Exceeded
     * @param A
     * @return
     */
    public static int largestPerimeter_bruteforce(int[] A) {
        final int N = A.length;
        int m = 0;
        Arrays.sort(A);
        for (int i = N - 1; i >= 0; i--) {
            for (int j = i - 1; j >= 0; j--) {
                for (int k = j - 1; k >= 0; k--) {
                    if (isValidTriangle(A[i], A[j], A[k])) {
                        if (A[i] + A[j] + A[k] > m)
                            m = A[i] + A[j] + A[k];
                    }
                }
            }
        }
        return m;
    }

    /**
     * 84 / 84 test cases passed.
     * Runtime: 9 ms, faster than 19.15% of Java online submissions for Largest Perimeter Triangle.
     * Memory Usage: 40.2 MB, less than 17.45% of Java online submissions for Largest Perimeter Triangle.
     * @param A
     * @return
     */
    public static int largestPerimeter_my(int[] A) {
        final int N = A.length;
        int m = 0;
        Arrays.sort(A);
        for (int i = N - 1; i >= 2; i--) {
            if (isValidTriangle(A[i], A[i - 1], A[i - 2])) {
                if (A[i] + A[i - 1] + A[i - 2] > m)
                    m = A[i] + A[i - 1] + A[i - 2];
            }
        }
        return m;
    }

    /**
     * 84 / 84 test cases passed.
     * Runtime: 7 ms, faster than 60.21% of Java online submissions for Largest Perimeter Triangle.
     * Memory Usage: 39.9 MB, less than 36.38% of Java online submissions for Largest Perimeter Triangle.
     * @param A
     * @return
     */
    public static int largestPerimeter_v1(int[] A) {
        final int N = A.length;
        Arrays.sort(A);
        for (int i = N - 1; i >= 2; i--) {
            if (A[i - 1] + A[i - 2] > A[i]) {
                return A[i] + A[i - 1] + A[i - 2];
            }
        }
        return 0;
    }

    /**
     * Solution to Leetcode problem 976 Largest Perimeter Triangle
     * https://poitevinpm.medium.com/solution-to-leetcode-problem-974-largest-perimeter-triangle-46129f20753f
     * 84 / 84 test cases passed.
     * Runtime: 6 ms, faster than 99.79% of Java online submissions for Largest Perimeter Triangle.
     * Memory Usage: 39.4 MB, less than 76.17% of Java online submissions for Largest Perimeter Triangle.
     * @param A
     * @return
     */
    public static int largestPerimeter(int[] A) {
        Arrays.sort(A);
        int a, b, c;
        for (int i = A.length - 1; i >= 2; i--) {
            a = A[i - 2];
            b = A[i - 1];
            c = A[i];
            if (a + b > c) {
                return a + b + c;
            }
        }
        return 0;
    }

    public static void main(String[] args) {
//        int[] A = {2, 1, 2};
//        int[] A = {1, 2, 1};
//        int[] A = {3, 2, 3, 4};
        int[] A = {3, 6, 2, 3};
//        int[] A = {350390, 769072, 578964, 434644, 143291, 163681, 850520, 506526, 77899, 858140, 424169, 929331, 950623, 126780, 572865, 384009, 364621, 583994, 341098, 429857, 244193, 242583, 253953, 783789, 752808, 128112, 360131, 842893, 765346, 28732, 819542, 707945, 829954, 49668, 770552, 522067, 335073, 709846, 635374, 656110, 897527, 782326, 466331, 966535, 553291, 769880, 705468, 60558, 290780, 236589, 486240, 75769, 454522, 191290, 694210, 941271, 275184, 760639, 19359, 901126, 151533, 879356, 532258, 508263, 398751, 137356, 372061, 667435, 388492, 427424, 981368, 787854, 6339, 417569, 487725, 181094, 464658, 361326, 884791, 699638, 742284, 143522, 313005, 213398, 309737, 527016, 97070, 726195, 716796, 198021, 955704, 934528, 982340, 534496, 471436, 722577, 701902, 741162, 780307, 815531, 554210, 461771, 750250, 380297, 47157, 393400, 83959, 105369, 442509, 425427, 629674, 991340, 950808, 136824, 4957, 567754, 493588, 232567, 914056, 204547, 361766, 589799, 603420, 880464, 427945, 577043, 730707, 416189, 929236, 254768, 284272, 850552, 778082, 599981, 547043, 291101, 831775, 175477, 817299, 134949, 750782, 301624, 514873, 167351, 141774, 920314, 476679, 684542, 324081, 6608, 23057, 106832, 873583, 106547, 730550, 923369, 169447, 289061, 149692, 919277, 340601, 938305, 711701, 153876, 932606, 259285, 265832, 992063, 675890, 319214, 763016, 809046, 181006, 975401, 414007, 86685, 576616, 143167, 718599, 344737, 753748, 812251, 842202, 106854, 255299, 497410, 694284, 900983, 751075, 693323, 991233, 327566, 399770, 303033, 241261, 672910, 218372, 93787, 820362, 861054, 534626, 429300, 105676, 135763, 846508, 487657, 660879, 826473, 225166, 792482, 973063, 976098, 931978, 34613, 782323, 397379, 465671, 324642, 671863, 480961, 320170, 689189, 573917, 750289, 259162, 983079, 377240, 143539, 352309, 478524, 165040, 887624, 113746, 106782, 270434, 687391, 396552, 472189, 806323, 798426, 594657, 511305, 919765, 98589, 786733, 833158, 293472, 686369, 533554, 943126, 765785, 620854, 229173, 32933, 843453, 83769, 8024, 560435, 539272, 725686, 587334, 411290, 828627, 499760, 874495, 84587, 575123, 784253, 323349, 291186, 542893, 115568, 991477, 184703, 228246, 215388, 758693, 986517, 696079, 168089, 937431, 384051, 694237, 505262, 169539, 288656, 232098, 285903, 775498, 872072, 762410, 569833, 254699, 777467, 901481, 751807, 718324, 954247, 930612, 857779, 688580, 467644, 980052, 994234, 158053, 458829, 902534, 52009, 533900, 454981, 366643, 64219, 271973, 443716, 611045, 169224, 549959, 356106, 72048, 793127, 565946, 410627, 285449, 740362, 614075, 316792, 523601, 118081, 494127, 189934, 304807, 853091, 71351, 345920, 767938, 681499, 412404, 880555, 558800, 667225, 270947, 798576, 74696, 9472, 548769, 965249, 401553, 278876, 334388, 820848, 550986, 708319, 821827, 588275, 190378, 906023, 939771, 672470, 553803, 986372, 496342, 573586, 171414, 296195, 553403, 249241, 701365, 667347, 105994, 944238, 636372, 611961, 15541, 438414, 791571, 853672, 425256, 381310, 585431, 640351, 567299, 633751, 126885, 150910, 363346, 711310, 969302, 798429, 992432, 22508, 605774, 569237, 8802, 389082, 423436, 469805, 61501, 906260, 506415, 529494, 926733, 589290, 10955, 943602, 778274, 138176, 630903, 267226, 116748, 658300, 943975, 432886, 618332, 780746, 845181, 305547, 177308, 118183, 910643, 626992, 398295, 483744, 31604, 721131, 428410, 908348, 229487, 869249, 826324, 440220, 281659, 459419, 30613, 819321, 59666, 805726, 635329, 209415, 491067, 883225, 642514, 726062, 688512, 329411, 851887, 440321, 85563, 769345, 601775, 848984, 106841, 4188, 19935, 183200, 871336, 189109, 155032, 788974, 494407, 763349, 799141, 442166, 430821, 666585, 667711, 357006, 533246, 313993, 165448, 452168, 78891, 869628, 325738, 544411, 980207, 977875, 230395, 428457, 33405, 607653, 939442, 379357, 545624, 753699, 631773, 801955, 157126, 240113, 599811, 98245, 873838, 179717, 92367, 539681, 1181, 110736, 662960, 915016, 73431, 533756, 659244, 833983, 498139, 473881, 205701, 984978, 899416, 363136, 864814, 556254, 338277, 359887, 250006, 304882, 812438, 863108, 857686, 992963, 381065, 119611, 2586, 719397, 65829, 863127, 478810, 985550, 988922, 717470, 299237, 854820, 831860, 824288, 356773, 198983, 288084, 404640, 245344, 131886, 242609, 452456, 437122, 861787, 60180, 110686, 986641, 11574, 329393, 847584, 900579, 171577, 891027, 250100, 534822, 805210, 62447, 83475, 745073, 43180, 811711, 766317, 992657, 385739, 343348, 869511, 379578, 268329, 635693, 24541, 495558, 144473, 675474, 485463, 389576, 513727, 982559, 56343, 719894, 680553, 287166, 876219, 768335, 154703, 280235, 787263, 133578, 1587, 410893, 162762, 256833, 389376, 792144, 826797, 293668, 778197, 19458, 281874, 868128, 268917, 598496, 228907, 997003, 752633, 250472, 520168, 816041, 256391, 334223, 950863, 310275, 488748, 320683, 725223, 862703, 818672, 300787, 249539, 445742, 220290, 546040, 768550, 648418, 276537, 346014, 247841, 122118, 823757, 145399, 108494, 663276, 873360, 270886, 368939, 972184, 305810, 285269, 622553, 61073, 317670, 24705, 519694, 602641, 538243, 572062, 922786, 44048, 973176, 403903, 152582, 230248, 73504, 689800, 972150, 546654, 692864, 12794, 46002, 383272, 438865, 170201, 68833, 977079, 58882, 736499, 429951, 652791, 8855, 250320, 92489, 580063, 407864, 309848, 814219, 62691, 336608, 358735, 830931, 726692, 607984, 374903, 180304, 253415, 697906, 693465, 178391, 174541, 988160, 643475, 158564, 338894, 385078, 161554, 541792, 96588, 319992, 454206, 831546, 61735, 972422, 742857, 901038, 287457, 639264, 929045, 3597, 178050, 933132, 666676, 134236, 243957, 91489, 928687, 533445, 277448, 18605, 513892, 526449, 956721, 163427, 509578, 13865, 326936, 105559, 105134, 618157, 665908, 810223, 673205, 972306, 168439, 769245, 143743, 871966, 641683, 162390, 283137, 45336, 109580, 874285, 483633, 744995, 748918, 827147, 333082, 276722, 945002, 61606, 518139, 867114, 338699, 546127, 916020, 86037, 468016, 833338, 35033, 587258, 740567, 660195, 345959, 52983, 650067, 524195, 7834, 645851, 891299, 889139, 338214, 126092, 361587, 481361, 117301, 76509, 49212, 169175, 925213, 676377, 297732, 889007, 162412, 477922, 356983, 454083, 990854, 934178, 564326, 594886, 692412, 579127, 532905, 321528, 703616, 384778, 533421, 167724, 278314, 925152, 504221, 511841, 193828, 568961, 930909, 134985, 731190, 658340, 130339, 665340, 880501, 428002, 873189, 716163, 699349, 317536, 910020, 425909, 54664, 514554, 49473, 358731, 507472, 927513, 449252, 741133, 90422, 893164, 895748, 842591, 179397, 372992, 48135, 597481, 971193, 546312, 451777, 220686, 176008, 98834, 585038, 248102, 128894, 568667, 936000, 738533, 98991, 403703, 785669, 352687, 557423, 849713, 293883, 638551, 93645, 863713, 97824, 372796, 280167, 188784, 396550, 454397, 852577, 872664, 771744, 796295, 625371, 185150, 301694, 170860, 765579, 300070, 795231, 643466, 453019, 523610, 872028, 63390, 722188, 832667, 772, 102999, 928962, 236243, 353553, 709678, 305973, 585781, 369543, 247957, 987560, 950134, 462176, 458101, 257317, 88154, 991972, 683260, 372185, 492902, 244790, 464008, 922876, 345836, 462363, 988564, 665341, 98535, 474355, 459865, 721817, 855537, 837977, 761415, 71742, 768255, 824719, 411675, 972291, 153931, 759648, 799861, 59599, 615300, 771190, 229480, 149426, 994771, 427116, 849570, 852229, 410189, 206464, 150301, 25696, 263344, 881227, 493640, 197243, 515327, 176244, 581135, 787583, 769764, 752599, 688498, 795409, 143697, 450927, 260171, 289566, 162149, 567947, 607853, 830940, 577123, 888121, 35455, 808104, 840404, 424730, 645544, 43949, 634215, 920741, 393852, 105375, 939760, 91959, 863219, 314066, 754708, 746716, 625286, 538627, 739751, 16854, 995745, 97323, 630888, 948248, 458671, 876599, 712861, 470978, 359595, 20697, 675831, 529945, 636867, 978293, 508011, 521206, 448210, 964882, 687488, 483946, 163638, 66187, 176674, 3082, 854329, 722210, 87500};
        int m = largestPerimeter(A);
        System.out.printf("%s", Arrays.toString(A));
        System.out.println();
        System.out.printf("the largest perimeter of a triangle=%d", m);
    }
}